// Generated by view binder compiler. Do not edit!
package com.campus.fitintent.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ScrollView;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.campus.fitintent.R;
import com.google.android.material.button.MaterialButton;
import com.google.android.material.card.MaterialCardView;
import com.google.android.material.imageview.ShapeableImageView;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentProfileBinding implements ViewBinding {
  @NonNull
  private final ScrollView rootView;

  @NonNull
  public final MaterialButton btnEditPreferences;

  @NonNull
  public final MaterialButton btnEditProfile;

  @NonNull
  public final MaterialButton btnLogout;

  @NonNull
  public final MaterialCardView cardCurrentStreak;

  @NonNull
  public final MaterialCardView cardDaysActive;

  @NonNull
  public final MaterialCardView cardPointsEarned;

  @NonNull
  public final MaterialCardView cardQuizResults;

  @NonNull
  public final MaterialCardView cardSettings;

  @NonNull
  public final MaterialCardView cardTotalWorkouts;

  @NonNull
  public final MaterialCardView cardUserHeader;

  @NonNull
  public final ImageView imgQuizExpand;

  @NonNull
  public final ShapeableImageView imgUserAvatar;

  @NonNull
  public final LinearLayout layoutAbout;

  @NonNull
  public final LinearLayout layoutDataExport;

  @NonNull
  public final LinearLayout layoutNotifications;

  @NonNull
  public final LinearLayout layoutQuizContent;

  @NonNull
  public final LinearLayout layoutQuizHeader;

  @NonNull
  public final LinearLayout layoutTheme;

  @NonNull
  public final TextView tvCurrentStreak;

  @NonNull
  public final TextView tvCurrentTheme;

  @NonNull
  public final TextView tvDaysActive;

  @NonNull
  public final TextView tvFitnessLevel;

  @NonNull
  public final TextView tvMemberSince;

  @NonNull
  public final TextView tvPointsEarned;

  @NonNull
  public final TextView tvPreferredWorkout;

  @NonNull
  public final TextView tvPrimaryGoal;

  @NonNull
  public final TextView tvTimeAvailability;

  @NonNull
  public final TextView tvTotalWorkouts;

  @NonNull
  public final TextView tvUserEmail;

  @NonNull
  public final TextView tvUserName;

  private FragmentProfileBinding(@NonNull ScrollView rootView,
      @NonNull MaterialButton btnEditPreferences, @NonNull MaterialButton btnEditProfile,
      @NonNull MaterialButton btnLogout, @NonNull MaterialCardView cardCurrentStreak,
      @NonNull MaterialCardView cardDaysActive, @NonNull MaterialCardView cardPointsEarned,
      @NonNull MaterialCardView cardQuizResults, @NonNull MaterialCardView cardSettings,
      @NonNull MaterialCardView cardTotalWorkouts, @NonNull MaterialCardView cardUserHeader,
      @NonNull ImageView imgQuizExpand, @NonNull ShapeableImageView imgUserAvatar,
      @NonNull LinearLayout layoutAbout, @NonNull LinearLayout layoutDataExport,
      @NonNull LinearLayout layoutNotifications, @NonNull LinearLayout layoutQuizContent,
      @NonNull LinearLayout layoutQuizHeader, @NonNull LinearLayout layoutTheme,
      @NonNull TextView tvCurrentStreak, @NonNull TextView tvCurrentTheme,
      @NonNull TextView tvDaysActive, @NonNull TextView tvFitnessLevel,
      @NonNull TextView tvMemberSince, @NonNull TextView tvPointsEarned,
      @NonNull TextView tvPreferredWorkout, @NonNull TextView tvPrimaryGoal,
      @NonNull TextView tvTimeAvailability, @NonNull TextView tvTotalWorkouts,
      @NonNull TextView tvUserEmail, @NonNull TextView tvUserName) {
    this.rootView = rootView;
    this.btnEditPreferences = btnEditPreferences;
    this.btnEditProfile = btnEditProfile;
    this.btnLogout = btnLogout;
    this.cardCurrentStreak = cardCurrentStreak;
    this.cardDaysActive = cardDaysActive;
    this.cardPointsEarned = cardPointsEarned;
    this.cardQuizResults = cardQuizResults;
    this.cardSettings = cardSettings;
    this.cardTotalWorkouts = cardTotalWorkouts;
    this.cardUserHeader = cardUserHeader;
    this.imgQuizExpand = imgQuizExpand;
    this.imgUserAvatar = imgUserAvatar;
    this.layoutAbout = layoutAbout;
    this.layoutDataExport = layoutDataExport;
    this.layoutNotifications = layoutNotifications;
    this.layoutQuizContent = layoutQuizContent;
    this.layoutQuizHeader = layoutQuizHeader;
    this.layoutTheme = layoutTheme;
    this.tvCurrentStreak = tvCurrentStreak;
    this.tvCurrentTheme = tvCurrentTheme;
    this.tvDaysActive = tvDaysActive;
    this.tvFitnessLevel = tvFitnessLevel;
    this.tvMemberSince = tvMemberSince;
    this.tvPointsEarned = tvPointsEarned;
    this.tvPreferredWorkout = tvPreferredWorkout;
    this.tvPrimaryGoal = tvPrimaryGoal;
    this.tvTimeAvailability = tvTimeAvailability;
    this.tvTotalWorkouts = tvTotalWorkouts;
    this.tvUserEmail = tvUserEmail;
    this.tvUserName = tvUserName;
  }

  @Override
  @NonNull
  public ScrollView getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentProfileBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentProfileBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_profile, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentProfileBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btnEditPreferences;
      MaterialButton btnEditPreferences = ViewBindings.findChildViewById(rootView, id);
      if (btnEditPreferences == null) {
        break missingId;
      }

      id = R.id.btnEditProfile;
      MaterialButton btnEditProfile = ViewBindings.findChildViewById(rootView, id);
      if (btnEditProfile == null) {
        break missingId;
      }

      id = R.id.btnLogout;
      MaterialButton btnLogout = ViewBindings.findChildViewById(rootView, id);
      if (btnLogout == null) {
        break missingId;
      }

      id = R.id.cardCurrentStreak;
      MaterialCardView cardCurrentStreak = ViewBindings.findChildViewById(rootView, id);
      if (cardCurrentStreak == null) {
        break missingId;
      }

      id = R.id.cardDaysActive;
      MaterialCardView cardDaysActive = ViewBindings.findChildViewById(rootView, id);
      if (cardDaysActive == null) {
        break missingId;
      }

      id = R.id.cardPointsEarned;
      MaterialCardView cardPointsEarned = ViewBindings.findChildViewById(rootView, id);
      if (cardPointsEarned == null) {
        break missingId;
      }

      id = R.id.cardQuizResults;
      MaterialCardView cardQuizResults = ViewBindings.findChildViewById(rootView, id);
      if (cardQuizResults == null) {
        break missingId;
      }

      id = R.id.cardSettings;
      MaterialCardView cardSettings = ViewBindings.findChildViewById(rootView, id);
      if (cardSettings == null) {
        break missingId;
      }

      id = R.id.cardTotalWorkouts;
      MaterialCardView cardTotalWorkouts = ViewBindings.findChildViewById(rootView, id);
      if (cardTotalWorkouts == null) {
        break missingId;
      }

      id = R.id.cardUserHeader;
      MaterialCardView cardUserHeader = ViewBindings.findChildViewById(rootView, id);
      if (cardUserHeader == null) {
        break missingId;
      }

      id = R.id.imgQuizExpand;
      ImageView imgQuizExpand = ViewBindings.findChildViewById(rootView, id);
      if (imgQuizExpand == null) {
        break missingId;
      }

      id = R.id.imgUserAvatar;
      ShapeableImageView imgUserAvatar = ViewBindings.findChildViewById(rootView, id);
      if (imgUserAvatar == null) {
        break missingId;
      }

      id = R.id.layoutAbout;
      LinearLayout layoutAbout = ViewBindings.findChildViewById(rootView, id);
      if (layoutAbout == null) {
        break missingId;
      }

      id = R.id.layoutDataExport;
      LinearLayout layoutDataExport = ViewBindings.findChildViewById(rootView, id);
      if (layoutDataExport == null) {
        break missingId;
      }

      id = R.id.layoutNotifications;
      LinearLayout layoutNotifications = ViewBindings.findChildViewById(rootView, id);
      if (layoutNotifications == null) {
        break missingId;
      }

      id = R.id.layoutQuizContent;
      LinearLayout layoutQuizContent = ViewBindings.findChildViewById(rootView, id);
      if (layoutQuizContent == null) {
        break missingId;
      }

      id = R.id.layoutQuizHeader;
      LinearLayout layoutQuizHeader = ViewBindings.findChildViewById(rootView, id);
      if (layoutQuizHeader == null) {
        break missingId;
      }

      id = R.id.layoutTheme;
      LinearLayout layoutTheme = ViewBindings.findChildViewById(rootView, id);
      if (layoutTheme == null) {
        break missingId;
      }

      id = R.id.tvCurrentStreak;
      TextView tvCurrentStreak = ViewBindings.findChildViewById(rootView, id);
      if (tvCurrentStreak == null) {
        break missingId;
      }

      id = R.id.tvCurrentTheme;
      TextView tvCurrentTheme = ViewBindings.findChildViewById(rootView, id);
      if (tvCurrentTheme == null) {
        break missingId;
      }

      id = R.id.tvDaysActive;
      TextView tvDaysActive = ViewBindings.findChildViewById(rootView, id);
      if (tvDaysActive == null) {
        break missingId;
      }

      id = R.id.tvFitnessLevel;
      TextView tvFitnessLevel = ViewBindings.findChildViewById(rootView, id);
      if (tvFitnessLevel == null) {
        break missingId;
      }

      id = R.id.tvMemberSince;
      TextView tvMemberSince = ViewBindings.findChildViewById(rootView, id);
      if (tvMemberSince == null) {
        break missingId;
      }

      id = R.id.tvPointsEarned;
      TextView tvPointsEarned = ViewBindings.findChildViewById(rootView, id);
      if (tvPointsEarned == null) {
        break missingId;
      }

      id = R.id.tvPreferredWorkout;
      TextView tvPreferredWorkout = ViewBindings.findChildViewById(rootView, id);
      if (tvPreferredWorkout == null) {
        break missingId;
      }

      id = R.id.tvPrimaryGoal;
      TextView tvPrimaryGoal = ViewBindings.findChildViewById(rootView, id);
      if (tvPrimaryGoal == null) {
        break missingId;
      }

      id = R.id.tvTimeAvailability;
      TextView tvTimeAvailability = ViewBindings.findChildViewById(rootView, id);
      if (tvTimeAvailability == null) {
        break missingId;
      }

      id = R.id.tvTotalWorkouts;
      TextView tvTotalWorkouts = ViewBindings.findChildViewById(rootView, id);
      if (tvTotalWorkouts == null) {
        break missingId;
      }

      id = R.id.tvUserEmail;
      TextView tvUserEmail = ViewBindings.findChildViewById(rootView, id);
      if (tvUserEmail == null) {
        break missingId;
      }

      id = R.id.tvUserName;
      TextView tvUserName = ViewBindings.findChildViewById(rootView, id);
      if (tvUserName == null) {
        break missingId;
      }

      return new FragmentProfileBinding((ScrollView) rootView, btnEditPreferences, btnEditProfile,
          btnLogout, cardCurrentStreak, cardDaysActive, cardPointsEarned, cardQuizResults,
          cardSettings, cardTotalWorkouts, cardUserHeader, imgQuizExpand, imgUserAvatar,
          layoutAbout, layoutDataExport, layoutNotifications, layoutQuizContent, layoutQuizHeader,
          layoutTheme, tvCurrentStreak, tvCurrentTheme, tvDaysActive, tvFitnessLevel, tvMemberSince,
          tvPointsEarned, tvPreferredWorkout, tvPrimaryGoal, tvTimeAvailability, tvTotalWorkouts,
          tvUserEmail, tvUserName);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
