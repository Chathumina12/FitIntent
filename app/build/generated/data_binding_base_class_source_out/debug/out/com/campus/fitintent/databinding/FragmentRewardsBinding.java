// Generated by view binder compiler. Do not edit!
package com.campus.fitintent.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.coordinatorlayout.widget.CoordinatorLayout;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.campus.fitintent.R;
import com.google.android.material.button.MaterialButton;
import com.google.android.material.card.MaterialCardView;
import com.google.android.material.progressindicator.CircularProgressIndicator;
import com.google.android.material.progressindicator.LinearProgressIndicator;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentRewardsBinding implements ViewBinding {
  @NonNull
  private final CoordinatorLayout rootView;

  @NonNull
  public final MaterialButton btnLeaderboard;

  @NonNull
  public final MaterialButton btnViewAllBadges;

  @NonNull
  public final MaterialCardView cardUserLevel;

  @NonNull
  public final ImageView imgLevelIcon;

  @NonNull
  public final LinearLayout layoutEmptyState;

  @NonNull
  public final LinearProgressIndicator progressLevel;

  @NonNull
  public final CircularProgressIndicator progressLoading;

  @NonNull
  public final RecyclerView recyclerViewNextBadges;

  @NonNull
  public final RecyclerView recyclerViewRecentAchievements;

  @NonNull
  public final TextView tvBadgesEarned;

  @NonNull
  public final TextView tvCompletionRate;

  @NonNull
  public final TextView tvCurrentStreak;

  @NonNull
  public final TextView tvPointsToNextLevel;

  @NonNull
  public final TextView tvTotalPoints;

  @NonNull
  public final TextView tvUserLevel;

  private FragmentRewardsBinding(@NonNull CoordinatorLayout rootView,
      @NonNull MaterialButton btnLeaderboard, @NonNull MaterialButton btnViewAllBadges,
      @NonNull MaterialCardView cardUserLevel, @NonNull ImageView imgLevelIcon,
      @NonNull LinearLayout layoutEmptyState, @NonNull LinearProgressIndicator progressLevel,
      @NonNull CircularProgressIndicator progressLoading,
      @NonNull RecyclerView recyclerViewNextBadges,
      @NonNull RecyclerView recyclerViewRecentAchievements, @NonNull TextView tvBadgesEarned,
      @NonNull TextView tvCompletionRate, @NonNull TextView tvCurrentStreak,
      @NonNull TextView tvPointsToNextLevel, @NonNull TextView tvTotalPoints,
      @NonNull TextView tvUserLevel) {
    this.rootView = rootView;
    this.btnLeaderboard = btnLeaderboard;
    this.btnViewAllBadges = btnViewAllBadges;
    this.cardUserLevel = cardUserLevel;
    this.imgLevelIcon = imgLevelIcon;
    this.layoutEmptyState = layoutEmptyState;
    this.progressLevel = progressLevel;
    this.progressLoading = progressLoading;
    this.recyclerViewNextBadges = recyclerViewNextBadges;
    this.recyclerViewRecentAchievements = recyclerViewRecentAchievements;
    this.tvBadgesEarned = tvBadgesEarned;
    this.tvCompletionRate = tvCompletionRate;
    this.tvCurrentStreak = tvCurrentStreak;
    this.tvPointsToNextLevel = tvPointsToNextLevel;
    this.tvTotalPoints = tvTotalPoints;
    this.tvUserLevel = tvUserLevel;
  }

  @Override
  @NonNull
  public CoordinatorLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentRewardsBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentRewardsBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_rewards, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentRewardsBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btnLeaderboard;
      MaterialButton btnLeaderboard = ViewBindings.findChildViewById(rootView, id);
      if (btnLeaderboard == null) {
        break missingId;
      }

      id = R.id.btnViewAllBadges;
      MaterialButton btnViewAllBadges = ViewBindings.findChildViewById(rootView, id);
      if (btnViewAllBadges == null) {
        break missingId;
      }

      id = R.id.cardUserLevel;
      MaterialCardView cardUserLevel = ViewBindings.findChildViewById(rootView, id);
      if (cardUserLevel == null) {
        break missingId;
      }

      id = R.id.imgLevelIcon;
      ImageView imgLevelIcon = ViewBindings.findChildViewById(rootView, id);
      if (imgLevelIcon == null) {
        break missingId;
      }

      id = R.id.layoutEmptyState;
      LinearLayout layoutEmptyState = ViewBindings.findChildViewById(rootView, id);
      if (layoutEmptyState == null) {
        break missingId;
      }

      id = R.id.progressLevel;
      LinearProgressIndicator progressLevel = ViewBindings.findChildViewById(rootView, id);
      if (progressLevel == null) {
        break missingId;
      }

      id = R.id.progressLoading;
      CircularProgressIndicator progressLoading = ViewBindings.findChildViewById(rootView, id);
      if (progressLoading == null) {
        break missingId;
      }

      id = R.id.recyclerViewNextBadges;
      RecyclerView recyclerViewNextBadges = ViewBindings.findChildViewById(rootView, id);
      if (recyclerViewNextBadges == null) {
        break missingId;
      }

      id = R.id.recyclerViewRecentAchievements;
      RecyclerView recyclerViewRecentAchievements = ViewBindings.findChildViewById(rootView, id);
      if (recyclerViewRecentAchievements == null) {
        break missingId;
      }

      id = R.id.tvBadgesEarned;
      TextView tvBadgesEarned = ViewBindings.findChildViewById(rootView, id);
      if (tvBadgesEarned == null) {
        break missingId;
      }

      id = R.id.tvCompletionRate;
      TextView tvCompletionRate = ViewBindings.findChildViewById(rootView, id);
      if (tvCompletionRate == null) {
        break missingId;
      }

      id = R.id.tvCurrentStreak;
      TextView tvCurrentStreak = ViewBindings.findChildViewById(rootView, id);
      if (tvCurrentStreak == null) {
        break missingId;
      }

      id = R.id.tvPointsToNextLevel;
      TextView tvPointsToNextLevel = ViewBindings.findChildViewById(rootView, id);
      if (tvPointsToNextLevel == null) {
        break missingId;
      }

      id = R.id.tvTotalPoints;
      TextView tvTotalPoints = ViewBindings.findChildViewById(rootView, id);
      if (tvTotalPoints == null) {
        break missingId;
      }

      id = R.id.tvUserLevel;
      TextView tvUserLevel = ViewBindings.findChildViewById(rootView, id);
      if (tvUserLevel == null) {
        break missingId;
      }

      return new FragmentRewardsBinding((CoordinatorLayout) rootView, btnLeaderboard,
          btnViewAllBadges, cardUserLevel, imgLevelIcon, layoutEmptyState, progressLevel,
          progressLoading, recyclerViewNextBadges, recyclerViewRecentAchievements, tvBadgesEarned,
          tvCompletionRate, tvCurrentStreak, tvPointsToNextLevel, tvTotalPoints, tvUserLevel);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
